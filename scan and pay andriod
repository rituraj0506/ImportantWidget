// fetch upi id and banking name 

//dependency 


dependencies {
    implementation("com.journeyapps:zxing-android-embedded:4.3.0")
    implementation("com.google.zxing:core:3.4.1")
    implementation("androidx.camera:camera-core:1.2.0")
    implementation ("androidx.camera:camera-camera2:1.2.0")
    implementation ("androidx.camera:camera-lifecycle:1.2.0")
    implementation ("androidx.camera:camera-view:1.2.0")
}


//fragment_scan_pay.xml

<?xml version="1.0" encoding="utf-8"?>

<layout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    >



    <LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@color/white"
        >



        <include
            android:id="@+id/linearLayout"
            layout="@layout/toolbar_layout"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/>


        <androidx.cardview.widget.CardView
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:layout_marginStart="32dp"
            android:layout_marginEnd="32dp"
            android:layout_marginTop="80dp"
            android:layout_marginBottom="16dp"
            app:cardCornerRadius="16dp"
            app:cardElevation="2dp"
            >

            <FrameLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <!-- Camera Preview -->
                <androidx.camera.view.PreviewView
                    android:id="@+id/qrPreviewView"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    app:implementationMode="compatible"
                    android:background="@android:color/darker_gray"
                    android:scaleType="fitCenter"
                    android:layout_gravity="center"
                    android:clipToOutline="true"
                    android:outlineProvider="background" />

                <!-- Laser Animation -->
                <View
                    android:id="@+id/laserView"
                    android:layout_width="match_parent"
                    android:layout_height="2dp"
                    android:background="@android:color/holo_red_light"
                    android:layout_gravity="center" />

                <View
                    android:id="@+id/borderView"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:background="@android:color/transparent"
                    android:layout_gravity="center" />
            </FrameLayout>


        </androidx.cardview.widget.CardView>


        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_margin="16dp"
            android:background="@drawable/rectangular_background"
            app:endIconMode="custom"
            app:endIconDrawable="@drawable/contactbook"
            app:endIconContentDescription="Pick contact"
            android:paddingEnd="12dp"
            android:paddingRight="12dp"
            app:boxBackgroundMode="outline"
            app:boxCornerRadiusTopStart="12dp"
            app:boxCornerRadiusTopEnd="12dp"
            app:boxCornerRadiusBottomStart="12dp"
            app:boxCornerRadiusBottomEnd="12dp"
            app:boxStrokeWidth="0dp"
            app:boxBackgroundColor="#F6F8FB">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/editTextMobileNumber"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="Enter Mobile Number"
                android:inputType="phone"

                android:textColor="@android:color/black"
                android:textSize="16sp"
                android:background="@android:color/transparent"
                android:paddingStart="12dp"
                android:paddingLeft="12dp"
                android:textColorHint="#215CB7" />
        </com.google.android.material.textfield.TextInputLayout>


        <TextView
            android:id="@+id/textViewRecents"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Recents Scan"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_marginStart="16dp"
            android:layout_marginTop="8dp"
            android:textColor="@android:color/holo_blue_dark" />

        <GridLayout
            android:id="@+id/gridRecents"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:columnCount="3"
            android:layout_margin="16dp"
            android:rowCount="2"
            android:alignmentMode="alignMargins"
            android:useDefaultMargins="true">


            <LinearLayout
                android:orientation="vertical"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:gravity="center">

                <TextView
                    android:layout_width="50dp"
                    android:layout_height="50dp"
                    android:gravity="center"
                    android:background="@android:color/holo_purple"
                    android:text="P"
                    android:textColor="@android:color/white"
                    android:textStyle="bold"
                    android:textSize="20sp"
                    android:backgroundTint="@android:color/holo_purple"
                    android:backgroundTintMode="src_in"
                    android:shape="oval" />

                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Pooja"
                    android:textSize="12sp"
                    android:layout_marginTop="4dp"/>
            </LinearLayout>


        </GridLayout>


    </LinearLayout>

</layout>


// ScanPayFragment.kt

package com.click.clickmoney.fragment
import android.animation.ObjectAnimator
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.animation.LinearInterpolator
import android.widget.Toast
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import com.click.clickmoney.R
import com.click.clickmoney.activity.UpiDetailsActivity
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import android.widget.ImageView
import android.widget.TextView
import com.google.mlkit.vision.barcode.BarcodeScanner


@Suppress("DEPRECATION")
class ScanPayFragment : Fragment() {

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var laserView: View
    private lateinit var borderView: View

    private var isNavigated = false

    private val CAMERA_PERMISSION_CODE = 1001

    @SuppressLint("SetTextI18n")
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_scan_pay, container, false)
        previewView = view.findViewById(R.id.qrPreviewView)
        laserView = view.findViewById(R.id.laserView)
        borderView = view.findViewById(R.id.borderView)
        cameraExecutor = Executors.newSingleThreadExecutor()


        startLaserAnimation()

        previewView.post {
            if (hasCameraPermission()) {
                startCamera()
            } else {
                requestCameraPermission()
            }
        }


        val backArrowBtn = view.findViewById<ImageView>(R.id.backArrowBtn)
        val pageName = view.findViewById<TextView>(R.id.pageName)

        // Set custom page title
        pageName.text = "QR UPI"

        backArrowBtn.setOnClickListener {
            requireActivity().onBackPressed()
        }

        return view
    }

    private fun startLaserAnimation() {
        val height = previewView.height.toFloat()
        val animator = ObjectAnimator.ofFloat(laserView, "translationY", 0f, height)
        animator.duration = 1500
        animator.repeatCount = ObjectAnimator.INFINITE
        animator.interpolator = LinearInterpolator()
        animator.start()
    }

    private fun hasCameraPermission() = ContextCompat.checkSelfPermission(
        requireContext(), Manifest.permission.CAMERA
    ) == PackageManager.PERMISSION_GRANTED

    private fun requestCameraPermission() {
        requestPermissions(arrayOf(Manifest.permission.CAMERA), CAMERA_PERMISSION_CODE)
    }

    @Deprecated("Deprecated in Java")
    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<out String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == CAMERA_PERMISSION_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                startCamera()
            } else {
                Toast.makeText(requireContext(), "Camera permission denied", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext())

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            // 1️⃣ Preview setup
            val preview = Preview.Builder().build().also { preview ->
                preview.setSurfaceProvider(previewView.surfaceProvider)
            }

            // 2️⃣ Barcode Scanner setup (ML Kit)
            val scanner = BarcodeScanning.getClient()
            val imageAnalyzer = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST) // Optional but safer
                .build()
                .also { analysis ->
                    analysis.setAnalyzer(cameraExecutor) { imageProxy ->
                        processImageProxy(scanner, imageProxy)
                    }
                }

            // 3️⃣ Use back camera
            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                // Unbind use cases before rebinding
                cameraProvider.unbindAll()

                // Bind to lifecycle (Preview + ImageAnalysis)
                cameraProvider.bindToLifecycle(
                    viewLifecycleOwner,
                    cameraSelector,
                    preview,
                    imageAnalyzer
                )

                Log.d("CameraX", "Camera started successfully")

            } catch (e: Exception) {
                Log.e("CameraX", "Use case binding failed", e)
                Toast.makeText(requireContext(), "Failed to start camera", Toast.LENGTH_SHORT).show()
            }

        }, ContextCompat.getMainExecutor(requireContext()))
    }




    @SuppressLint("UnsafeOptInUsageError")
    private fun processImageProxy(scanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null && !isNavigated) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            scanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val scannedData = barcode.displayValue
                        if (!scannedData.isNullOrEmpty()) {
                            isNavigated = true

                            val uri = Uri.parse(scannedData)
                            val upiId = uri.getQueryParameter("pa")
                            val bankName = uri.getQueryParameter("pn")

                            if (upiId != null && bankName != null) {
                                val intent = Intent(requireContext(), UpiDetailsActivity::class.java)
                                intent.putExtra("bank_name", bankName)
                                intent.putExtra("upi_id", upiId)
                                startActivity(intent)
                            } else {
                                Toast.makeText(requireContext(), "Invalid UPI QR Code", Toast.LENGTH_SHORT).show()
                            }
                        }
                    }
                }
                .addOnFailureListener {
                    Log.e("CameraX", "Error scanning QR code", it)
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        } else {
            imageProxy.close()
        }
    }

    override fun onResume() {
        super.onResume()
        if (!isNavigated) {
            startCamera()
        }
        isNavigated = false
    }


    override fun onDestroyView() {
        super.onDestroyView()
        ProcessCameraProvider.getInstance(requireContext()).get().unbindAll()
        cameraExecutor.shutdown()
    }

}





